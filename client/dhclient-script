######################################################################
# Copyright (c) 2012, Yahoo! Inc. All rights reserved.
#
# This program is free software. You may copy or redistribute it under
# the same terms as Perl itself. Please see the LICENSE.Artistic file 
# included with this project for the terms of the Artistic License
# under which this project is licensed. 
######################################################################

#!/usr/bin/perl

use strict;
use warnings 'all';
use YAML ();

use lib '/sysbuilder/lib';
use SysBuilder::Utils qw(run_local);

$ENV{PATH}
  = "/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin:/usr/local/sbin";

sub load_config {
    my $iface = shift;
    my $cfg   = {};
    if ( -r "/sysbuilder/etc/dhclient.yaml" ) {
        $cfg = YAML::LoadFile("/sysbuilder/etc/dhclient.yaml");
    }
    if ( exists $cfg->{$iface} ) {
        return $cfg->{$iface};
    }
    else {
        return {};
    }
}

sub save_config {
    my ( $cur_iface, $cur_cfg ) = @_;
    my $cfg;
    if ( -r "/sysbuilder/etc/dhclient.yaml" ) {
        $cfg = YAML::LoadFile("/sysbuilder/etc/dhclient.yaml");
    }
    unless ($cfg) {
        $cfg = { $cur_iface => $cur_cfg };
    }
    else {
        $cfg->{$cur_iface} = $cur_cfg;
    }
    YAML::DumpFile( "/sysbuilder/etc/dhclient.yaml", $cfg );
}

# up all the interfaces
sub preinit {
    my $interface = $ENV{interface};
    die "no env var. interface\n" unless $interface;
    run_local("ifconfig $interface up");
}

sub parse_env {
    my @attrs = qw(broadcast_address dhcp_lease_time
        dhcp_message_type dhcp_server_identifier domain_name
        domain_name_servers ntp_servers expiry filename ip_address
        network_number routers server_name subnet_mask);

    my %cfg = map { $_ => $ENV{"new_$_"} } @attrs;
    $cfg{interface} = $ENV{interface};

    return \%cfg;
}

sub bound {
    my $iface   = $ENV{interface};
    my $old_cfg = load_config($iface);
    my $new_cfg = parse_env();

    my $addr      = $new_cfg->{ip_address};
    my $netmask   = $new_cfg->{subnet_mask};
    my $gw        = $new_cfg->{routers};
    my $broadcast = $new_cfg->{broadcast_address};

    my $changed = 0;
    if (   !defined( $old_cfg->{ip_address} )
        || $addr      ne $old_cfg->{ip_address}
        || $netmask   ne $old_cfg->{subnet_mask}
        || $gw        ne $old_cfg->{routers}
        || $broadcast ne $old_cfg->{broadcast_address} )
    {

        run_local(
            "ifconfig $iface up $addr netmask $netmask broadcast $broadcast");
        $changed = 1;
    }

    if ($changed) {
        my $router = $new_cfg->{routers};
        run_local("route add default gw $router") if $router;
    }

    # write resolv.conf
    resolv_conf($new_cfg);

    # write ntp.conf
    ntp_conf($new_cfg);

    # write /etc/hosts
    etc_hosts($new_cfg);

    # set hostname
    my $hostname = $new_cfg->{server_name};
    system("hostname $hostname");

    save_config( $iface, $new_cfg );
}

sub ntp_conf {
    my $cfg         = shift;
    my $ntp_servers = $cfg->{ntp_servers};
    return unless $ntp_servers;

    my @servers = split ' ', $ntp_servers;
    my $servers = join( "\n", map {"server $_"} @servers );

    open my $fh, ">", "/etc/ntp.conf.new" or die "/etc/ntp.conf.new: $!";
    print $fh <<EOT;
# Generated by sysbuilder

driftfile /var/lib/ntp/drift
pidfile /var/run/ntpd.pid

$servers

restrict default ignore
restrict 127.0.0.1
EOT
    close $fh;
    unlink "/etc/ntp.conf";
    rename "/etc/ntp.conf.new", "/etc/ntp.conf";
}

sub etc_hosts {
    my $cfg      = shift;
    my $hostname = $cfg->{server_name};
    my $boothost = $cfg->{dhcp_server_identifier};
    my $addr     = $cfg->{ip_address};

    open my $fh, ">/etc/hosts.new" or die "/etc/hosts.new";
    print $fh "127.0.0.1    localhost\n";
    print $fh "$addr    $hostname\n";
    print $fh "$boothost boothost\n";
    close $fh;
    unlink "/etc/hosts";
    rename "/etc/hosts.new" => "/etc/hosts";
}

sub resolv_conf {
    my $cfg         = shift;
    my $dns_servers = $cfg->{domain_name_servers};
    my $domain      = $cfg->{domain_name};

    open my $fh, ">/etc/resolv.conf.new" or die "/etc/resolv.conf.new: $!";
    print $fh <<EOT;
; generated by $0 (from sysbuilder)
search $domain

options attempts:3
options timeout:1

EOT

    for my $server ( split ' ', $dns_servers ) {
        print $fh "nameserver $server\n";
    }
    close $fh;

    rename "/etc/resolv.conf"     => "/etc/resolv.conf.old";
    rename "/etc/resolv.conf.new" => "/etc/resolv.conf";
}

my $reason = $ENV{reason};
if ( $reason eq "PREINIT" ) {
    preinit();
}
elsif ( $reason eq "REBOOT" || $reason eq "BOUND" ) {
    bound();
}
elsif ( $reason eq "RENEW" ) {

    # ignore for now
}
system("env > /tmp/dhclient-$reason");    # for debugging

__DATA__
interface=eth0
new_broadcast_address=4.6.12.63
new_dhcp_lease_time=600
new_dhcp_message_type=5
new_dhcp_server_identifier=4.6.11.7
new_domain_name=foo.com
new_domain_name_servers=4.6.11.7
new_expiry=1169698047
new_filename=pxelinux.bin
new_ip_address=4.6.12.12
new_network_number=4.6.12.0
new_routers=4.6.12.1
new_server_name=bar.foo.com
new_subnet_mask=255.255.255.192

